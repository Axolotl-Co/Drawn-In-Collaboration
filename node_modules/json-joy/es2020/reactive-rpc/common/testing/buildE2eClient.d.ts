import { Writer } from '../../../util/buffers/Writer';
import { TypedRpcClient } from '../rpc';
import type { FunctionStreamingType, FunctionType } from '../../../json-type/type/classes';
import type { Observable } from 'rxjs';
import type { ResolveType } from '../../../json-type';
import type { TypeRouter } from '../../../json-type/system/TypeRouter';
import type { TypeRouterCaller } from '../rpc/caller/TypeRouterCaller';
import type { RpcCaller } from '../rpc/caller/RpcCaller';
import type { ObjectValueCaller } from '../rpc/caller/ObjectValueCaller';
import type { ObjectValue, ObjectValueToTypeMap, UnObjectType } from '../../../json-type-value/ObjectValue';
export interface BuildE2eClientOptions {
    writer?: Writer;
    writerDefaultBufferKb?: [min: number, max: number];
    serverBufferSize?: [min: number, max: number];
    serverBufferTime?: [min: number, max: number];
    clientBufferSize?: [min: number, max: number];
    clientBufferTime?: [min: number, max: number];
    ip?: string;
    token?: string;
}
export declare const buildE2eClient: <Caller extends RpcCaller<any>>(caller: Caller, opt: BuildE2eClientOptions) => {
    client: TypedRpcClient<{ [K in keyof UnTypeRouter<UnTypeRouterCaller<Caller>>]: UnwrapFunction<UnTypeRouter<UnTypeRouterCaller<Caller>>[K]>; }>;
};
type UnTypeRouterCaller<T> = T extends TypeRouterCaller<infer R> ? R : T extends ObjectValueCaller<infer R> ? R : never;
type UnTypeRouter<T> = T extends TypeRouter<infer R> ? R : T extends ObjectValue<infer R> ? ObjectValueToTypeMap<UnObjectType<R>> : never;
type UnwrapFunction<F> = F extends FunctionType<infer Req, infer Res> ? (req: ResolveType<Req>) => Promise<ResolveType<Res>> : F extends FunctionStreamingType<infer Req, infer Res> ? (req$: Observable<ResolveType<Req>>) => Observable<ResolveType<Res>> : never;
export {};

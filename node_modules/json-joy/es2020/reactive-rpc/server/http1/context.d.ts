/// <reference types="node" />
import type * as http from 'http';
import type { JsonValueCodec } from '../../../json-pack/codecs/types';
import type { RpcMessageCodec } from '../../common/codec/types';
import type { WsServerConnection } from '../ws/server/WsServerConnection';
export interface ConnectionContext<Meta = Record<string, unknown>> {
    path: string;
    query: string;
    ip: string;
    token: string;
    params: string[] | null;
    meta: Meta;
    reqCodec: JsonValueCodec;
    resCodec: JsonValueCodec;
    msgCodec: RpcMessageCodec;
}
export declare class Http1ConnectionContext<Meta = Record<string, unknown>> implements ConnectionContext<Meta> {
    readonly req: http.IncomingMessage;
    readonly res: http.ServerResponse;
    path: string;
    query: string;
    readonly ip: string;
    token: string;
    readonly params: string[] | null;
    readonly meta: Meta;
    reqCodec: JsonValueCodec;
    resCodec: JsonValueCodec;
    msgCodec: RpcMessageCodec;
    constructor(req: http.IncomingMessage, res: http.ServerResponse, path: string, query: string, ip: string, token: string, params: string[] | null, meta: Meta, reqCodec: JsonValueCodec, resCodec: JsonValueCodec, msgCodec: RpcMessageCodec);
    body(maxPayload: number): Promise<Uint8Array>;
}
export declare class WsConnectionContext<Meta = Record<string, unknown>> implements ConnectionContext<Meta> {
    readonly connection: WsServerConnection;
    path: string;
    query: string;
    readonly ip: string;
    token: string;
    readonly params: string[] | null;
    readonly meta: Meta;
    reqCodec: JsonValueCodec;
    resCodec: JsonValueCodec;
    msgCodec: RpcMessageCodec;
    constructor(connection: WsServerConnection, path: string, query: string, ip: string, token: string, params: string[] | null, meta: Meta, reqCodec: JsonValueCodec, resCodec: JsonValueCodec, msgCodec: RpcMessageCodec);
}

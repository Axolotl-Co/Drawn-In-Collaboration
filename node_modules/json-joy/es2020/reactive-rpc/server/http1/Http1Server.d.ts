/// <reference types="node" />
import * as http from 'http';
import { WsServerConnection } from '../ws/server/WsServerConnection';
import { WsFrameEncoder } from '../ws/codec/WsFrameEncoder';
import { Writer } from '../../../util/buffers/Writer';
import { RouteMatcher } from '../../../util/router/codegen';
import { Router } from '../../../util/router';
import { Printable } from '../../../util/print/types';
import { Http1ConnectionContext, WsConnectionContext } from './context';
import { RpcCodecs } from '../../common/codec/RpcCodecs';
export type Http1Handler = (ctx: Http1ConnectionContext) => void | Promise<void>;
export type Http1NotFoundHandler = (res: http.ServerResponse, req: http.IncomingMessage) => void;
export type Http1InternalErrorHandler = (error: unknown, res: http.ServerResponse, req: http.IncomingMessage) => void;
export declare class Http1EndpointMatch {
    readonly handler: Http1Handler;
    constructor(handler: Http1Handler);
}
export interface Http1EndpointDefinition {
    method?: string | 'GET' | 'POST' | 'PUT' | 'DELETE' | 'HEAD' | 'OPTIONS' | 'TRACE' | 'CONNECT';
    path: string;
    handler: Http1Handler;
}
export interface WsEndpointDefinition {
    path: string;
    maxIncomingMessage?: number;
    maxOutgoingBackpressure?: number;
    onUpgrade?(req: http.IncomingMessage, connection: WsServerConnection): void;
    handler(ctx: WsConnectionContext, req: http.IncomingMessage): void;
}
export interface Http1ServerOpts {
    server: http.Server;
    codecs?: RpcCodecs;
    writer?: Writer;
}
export declare class Http1Server implements Printable {
    protected readonly opts: Http1ServerOpts;
    static start(opts?: http.ServerOptions, port?: number): Http1Server;
    readonly codecs: RpcCodecs;
    readonly server: http.Server;
    constructor(opts: Http1ServerOpts);
    start(): void;
    onnotfound: Http1NotFoundHandler;
    oninternalerror: Http1InternalErrorHandler;
    protected readonly httpRouter: Router<Http1EndpointMatch>;
    protected httpMatcher: RouteMatcher<Http1EndpointMatch>;
    route(def: Http1EndpointDefinition): void;
    private readonly onRequest;
    protected readonly wsEncoder: WsFrameEncoder;
    protected readonly wsRouter: Router<WsEndpointDefinition>;
    protected wsMatcher: RouteMatcher<WsEndpointDefinition>;
    private readonly onWsUpgrade;
    ws(def: WsEndpointDefinition): void;
    findIp(req: http.IncomingMessage): string;
    findToken(req: http.IncomingMessage): string;
    enableHttpPing(path?: string): void;
    toString(tab?: string): string;
}

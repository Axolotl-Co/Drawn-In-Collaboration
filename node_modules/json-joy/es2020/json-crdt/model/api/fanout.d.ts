import { FanOut, FanOutUnsubscribe, FanOutListener } from 'thingies/es2020/fanout';
export declare class MergeFanOut<D> extends FanOut<D> {
    private readonly fanouts;
    private unsubs;
    constructor(fanouts: FanOut<any>[]);
    listen(listener: FanOutListener<D>): FanOutUnsubscribe;
}
export declare class MicrotaskBufferFanOut<I> extends FanOut<I[]> {
    private readonly source;
    private buffer;
    private unsub?;
    constructor(source: FanOut<I>);
    listen(listener: FanOutListener<I[]>): FanOutUnsubscribe;
    clear(): void;
}
export declare class MapFanOut<I, O> extends FanOut<O> {
    private readonly source;
    private readonly mapper;
    constructor(source: FanOut<I>, mapper: (data: I) => O);
    private unsub?;
    listen(listener: FanOutListener<O>): FanOutUnsubscribe;
    clear(): void;
}
export declare class OnNewFanOut<D> extends FanOut<D> {
    private readonly source;
    private last;
    private unsub?;
    constructor(source: FanOut<D>);
    listen(listener: FanOutListener<D>): FanOutUnsubscribe;
    clear(): void;
}

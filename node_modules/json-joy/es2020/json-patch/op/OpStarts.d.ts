import type { CompactStartsOp } from '../codec/compact/types';
import { AbstractPredicateOp } from './AbstractPredicateOp';
import { OperationStarts } from '../types';
import { Path } from '../../json-pointer';
import { OPCODE } from '../constants';
import { AbstractOp } from './AbstractOp';
import type { IMessagePackEncoder } from '../../json-pack/msgpack';
export declare class OpStarts extends AbstractPredicateOp<'starts'> {
    readonly value: string;
    readonly ignore_case: boolean;
    constructor(path: Path, value: string, ignore_case: boolean);
    op(): "starts";
    code(): OPCODE;
    test(doc: unknown): boolean;
    toJson(parent?: AbstractOp): OperationStarts;
    toCompact(parent: undefined | AbstractOp, verbose: boolean): CompactStartsOp;
    encode(encoder: IMessagePackEncoder, parent?: AbstractOp): void;
}

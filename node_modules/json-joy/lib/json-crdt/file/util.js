"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodePatch = exports.decodeModel = exports.decodeSeqCborComponents = exports.decodeNdjsonComponents = void 0;
const JsonDecoder_1 = require("../../json-pack/json/JsonDecoder");
const CborDecoder_1 = require("../../json-pack/cbor/CborDecoder");
const model_1 = require("../model");
const Decoder_1 = require("../codec/structural/compact/Decoder");
const Decoder_2 = require("../codec/structural/verbose/Decoder");
const decode_1 = require("../../json-crdt-patch/codec/compact/decode");
const decode_2 = require("../../json-crdt-patch/codec/verbose/decode");
const json_crdt_patch_1 = require("../../json-crdt-patch");
const decodeNdjsonComponents = (blob) => {
    const decoder = new JsonDecoder_1.JsonDecoder();
    const reader = decoder.reader;
    reader.reset(blob);
    const components = [];
    while (reader.x < blob.length) {
        components.push(decoder.readAny());
        const nl = reader.u8();
        if (nl !== '\n'.charCodeAt(0))
            throw new Error('NDJSON_UNEXPECTED_NEWLINE');
    }
    return components;
};
exports.decodeNdjsonComponents = decodeNdjsonComponents;
const decodeSeqCborComponents = (blob) => {
    const decoder = new CborDecoder_1.CborDecoder();
    const reader = decoder.reader;
    reader.reset(blob);
    const components = [];
    while (reader.x < blob.length)
        components.push(decoder.val());
    return components;
};
exports.decodeSeqCborComponents = decodeSeqCborComponents;
const decodeModel = (serialized) => {
    if (!serialized)
        throw new Error('NO_MODEL');
    if (serialized instanceof Uint8Array)
        return model_1.Model.fromBinary(serialized);
    if (Array.isArray(serialized))
        return new Decoder_1.Decoder().decode(serialized);
    if (typeof serialized === 'object')
        return new Decoder_2.Decoder().decode(serialized);
    throw new Error('UNKNOWN_MODEL');
};
exports.decodeModel = decodeModel;
const decodePatch = (serialized) => {
    if (!serialized)
        throw new Error('NO_MODEL');
    if (serialized instanceof Uint8Array)
        return json_crdt_patch_1.Patch.fromBinary(serialized);
    if (Array.isArray(serialized))
        return (0, decode_1.decode)(serialized);
    if (typeof serialized === 'object')
        return (0, decode_2.decode)(serialized);
    throw new Error('UNKNOWN_MODEL');
};
exports.decodePatch = decodePatch;

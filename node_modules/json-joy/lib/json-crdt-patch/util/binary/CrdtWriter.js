"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CrdtWriter = void 0;
const Writer_1 = require("../../../util/buffers/Writer");
class CrdtWriter extends Writer_1.Writer {
    id(x, y) {
        if (x <= 0b111 && y <= 0b1111) {
            this.u8((x << 4) | y);
        }
        else {
            this.b1vu56(1, x);
            this.vu57(y);
        }
    }
    vu57(num) {
        if (num <= 0b1111111) {
            this.u8(num);
        }
        else if (num <= 16383) {
            this.ensureCapacity(2);
            const uint8 = this.uint8;
            uint8[this.x++] = 0b10000000 | (num & 0b01111111);
            uint8[this.x++] = num >>> 7;
        }
        else if (num <= 2097151) {
            this.ensureCapacity(3);
            const uint8 = this.uint8;
            uint8[this.x++] = 0b10000000 | (num & 0b01111111);
            uint8[this.x++] = 0b10000000 | ((num >>> 7) & 0b01111111);
            uint8[this.x++] = num >>> 14;
        }
        else if (num <= 268435455) {
            this.ensureCapacity(4);
            const uint8 = this.uint8;
            uint8[this.x++] = 0b10000000 | (num & 0b01111111);
            uint8[this.x++] = 0b10000000 | ((num >>> 7) & 0b01111111);
            uint8[this.x++] = 0b10000000 | ((num >>> 14) & 0b01111111);
            uint8[this.x++] = num >>> 21;
        }
        else {
            let lo32 = num | 0;
            if (lo32 < 0)
                lo32 += 4294967296;
            const hi32 = (num - lo32) / 4294967296;
            if (num <= 34359738367) {
                this.ensureCapacity(5);
                const uint8 = this.uint8;
                uint8[this.x++] = 0b10000000 | (num & 0b01111111);
                uint8[this.x++] = 0b10000000 | ((num >>> 7) & 0b01111111);
                uint8[this.x++] = 0b10000000 | ((num >>> 14) & 0b01111111);
                uint8[this.x++] = 0b10000000 | ((num >>> 21) & 0b01111111);
                uint8[this.x++] = (hi32 << 4) | (num >>> 28);
            }
            else if (num <= 4398046511103) {
                this.ensureCapacity(6);
                const uint8 = this.uint8;
                uint8[this.x++] = 0b10000000 | (num & 0b01111111);
                uint8[this.x++] = 0b10000000 | ((num >>> 7) & 0b01111111);
                uint8[this.x++] = 0b10000000 | ((num >>> 14) & 0b01111111);
                uint8[this.x++] = 0b10000000 | ((num >>> 21) & 0b01111111);
                uint8[this.x++] = 0b10000000 | ((hi32 & 0b111) << 4) | (num >>> 28);
                uint8[this.x++] = hi32 >>> 3;
            }
            else if (num <= 562949953421311) {
                this.ensureCapacity(7);
                const uint8 = this.uint8;
                uint8[this.x++] = 0b10000000 | (num & 0b01111111);
                uint8[this.x++] = 0b10000000 | ((num >>> 7) & 0b01111111);
                uint8[this.x++] = 0b10000000 | ((num >>> 14) & 0b01111111);
                uint8[this.x++] = 0b10000000 | ((num >>> 21) & 0b01111111);
                uint8[this.x++] = 0b10000000 | ((hi32 & 0b111) << 4) | (num >>> 28);
                uint8[this.x++] = 0b10000000 | ((hi32 & 1016) >>> 3);
                uint8[this.x++] = hi32 >>> 10;
            }
            else {
                this.ensureCapacity(8);
                const uint8 = this.uint8;
                uint8[this.x++] = 0b10000000 | (num & 0b01111111);
                uint8[this.x++] = 0b10000000 | ((num >>> 7) & 0b01111111);
                uint8[this.x++] = 0b10000000 | ((num >>> 14) & 0b01111111);
                uint8[this.x++] = 0b10000000 | ((num >>> 21) & 0b01111111);
                uint8[this.x++] = 0b10000000 | ((hi32 & 0b111) << 4) | (num >>> 28);
                uint8[this.x++] = 0b10000000 | ((hi32 & 1016) >>> 3);
                uint8[this.x++] = 0b10000000 | ((hi32 & 130048) >>> 10);
                uint8[this.x++] = hi32 >>> 17;
            }
        }
    }
    b1vu56(flag, num) {
        if (num <= 0b111111) {
            this.u8((flag << 7) | num);
        }
        else {
            const firstByteMask = (flag << 7) | 0b1000000;
            if (num <= 8191) {
                this.ensureCapacity(2);
                const uint8 = this.uint8;
                uint8[this.x++] = firstByteMask | (num & 0b00111111);
                uint8[this.x++] = num >>> 6;
            }
            else if (num <= 1048575) {
                this.ensureCapacity(3);
                const uint8 = this.uint8;
                uint8[this.x++] = firstByteMask | (num & 0b00111111);
                uint8[this.x++] = 0b10000000 | ((num >>> 6) & 0b01111111);
                uint8[this.x++] = num >>> 13;
            }
            else if (num <= 134217727) {
                this.ensureCapacity(4);
                const uint8 = this.uint8;
                uint8[this.x++] = firstByteMask | (num & 0b00111111);
                uint8[this.x++] = 0b10000000 | ((num >>> 6) & 0b01111111);
                uint8[this.x++] = 0b10000000 | ((num >>> 13) & 0b01111111);
                uint8[this.x++] = num >>> 20;
            }
            else {
                let lo32 = num | 0;
                if (lo32 < 0)
                    lo32 += 4294967296;
                const hi32 = (num - lo32) / 4294967296;
                if (num <= 17179869183) {
                    this.ensureCapacity(5);
                    const uint8 = this.uint8;
                    uint8[this.x++] = firstByteMask | (num & 0b00111111);
                    uint8[this.x++] = 0b10000000 | ((num >>> 6) & 0b01111111);
                    uint8[this.x++] = 0b10000000 | ((num >>> 13) & 0b01111111);
                    uint8[this.x++] = 0b10000000 | ((num >>> 20) & 0b01111111);
                    uint8[this.x++] = (hi32 << 5) | (num >>> 27);
                }
                else if (num <= 2199023255551) {
                    this.ensureCapacity(6);
                    const uint8 = this.uint8;
                    uint8[this.x++] = firstByteMask | (num & 0b00111111);
                    uint8[this.x++] = 0b10000000 | ((num >>> 6) & 0b01111111);
                    uint8[this.x++] = 0b10000000 | ((num >>> 13) & 0b01111111);
                    uint8[this.x++] = 0b10000000 | ((num >>> 20) & 0b01111111);
                    uint8[this.x++] = 0b10000000 | ((hi32 & 0b11) << 5) | (num >>> 27);
                    uint8[this.x++] = hi32 >>> 2;
                }
                else if (num <= 281474976710655) {
                    this.ensureCapacity(7);
                    const uint8 = this.uint8;
                    uint8[this.x++] = firstByteMask | (num & 0b00111111);
                    uint8[this.x++] = 0b10000000 | ((num >>> 6) & 0b01111111);
                    uint8[this.x++] = 0b10000000 | ((num >>> 13) & 0b01111111);
                    uint8[this.x++] = 0b10000000 | ((num >>> 20) & 0b01111111);
                    uint8[this.x++] = 0b10000000 | ((hi32 & 0b11) << 5) | (num >>> 27);
                    uint8[this.x++] = 0b10000000 | ((hi32 & 508) >>> 2);
                    uint8[this.x++] = hi32 >>> 9;
                }
                else {
                    this.ensureCapacity(8);
                    const uint8 = this.uint8;
                    uint8[this.x++] = firstByteMask | (num & 0b00111111);
                    uint8[this.x++] = 0b10000000 | ((num >>> 6) & 0b01111111);
                    uint8[this.x++] = 0b10000000 | ((num >>> 13) & 0b01111111);
                    uint8[this.x++] = 0b10000000 | ((num >>> 20) & 0b01111111);
                    uint8[this.x++] = 0b10000000 | ((hi32 & 0b11) << 5) | (num >>> 27);
                    uint8[this.x++] = 0b10000000 | ((hi32 & 508) >>> 2);
                    uint8[this.x++] = 0b10000000 | ((hi32 & 65024) >>> 9);
                    uint8[this.x++] = hi32 >>> 16;
                }
            }
        }
    }
}
exports.CrdtWriter = CrdtWriter;

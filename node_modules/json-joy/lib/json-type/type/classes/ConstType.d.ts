import * as schema from '../../schema';
import { ValidatorCodegenContext } from '../../codegen/validator/ValidatorCodegenContext';
import { ValidationPath } from '../../codegen/validator/types';
import { JsonTextEncoderCodegenContext } from '../../codegen/json/JsonTextEncoderCodegenContext';
import { CborEncoderCodegenContext } from '../../codegen/binary/CborEncoderCodegenContext';
import { JsonEncoderCodegenContext } from '../../codegen/binary/JsonEncoderCodegenContext';
import { JsExpression } from '../../../util/codegen/util/JsExpression';
import { MessagePackEncoderCodegenContext } from '../../codegen/binary/MessagePackEncoderCodegenContext';
import { CapacityEstimatorCodegenContext } from '../../codegen/capacity/CapacityEstimatorCodegenContext';
import { AbstractType } from './AbstractType';
import type * as jsonSchema from '../../../json-schema';
import type { TypeSystem } from '../../system/TypeSystem';
import type { json_string } from '../../../json-brand';
import type * as ts from '../../typescript/types';
import type { TypeExportContext } from '../../system/TypeExportContext';
import type * as jtd from '../../jtd/types';
export declare class ConstType<V = any> extends AbstractType<schema.ConstSchema<V>> {
    protected schema: schema.ConstSchema<any>;
    private __json;
    constructor(schema: schema.ConstSchema<any>);
    value(): any;
    toJsonSchema(ctx?: TypeExportContext): jsonSchema.JsonSchemaValueNode;
    getOptions(): schema.Optional<schema.ConstSchema<V>>;
    validateSchema(): void;
    codegenValidator(ctx: ValidatorCodegenContext, path: ValidationPath, r: string): void;
    codegenJsonTextEncoder(ctx: JsonTextEncoderCodegenContext, value: JsExpression): void;
    private codegenBinaryEncoder;
    codegenCborEncoder(ctx: CborEncoderCodegenContext, value: JsExpression): void;
    codegenMessagePackEncoder(ctx: MessagePackEncoderCodegenContext, value: JsExpression): void;
    codegenJsonEncoder(ctx: JsonEncoderCodegenContext, value: JsExpression): void;
    codegenCapacityEstimator(ctx: CapacityEstimatorCodegenContext, value: JsExpression): void;
    random(): unknown;
    toTypeScriptAst(): ts.TsUnknownKeyword | ts.TsNullKeyword | ts.TsTrueKeyword | ts.TsFalseKeyword | ts.TsStringLiteral | ts.TsObjectKeyword | ts.TsNumericLiteral;
    toJson(value: unknown, system?: TypeSystem | undefined): json_string<V>;
    toString(tab?: string): string;
    toJtdForm(): jtd.JtdForm;
}

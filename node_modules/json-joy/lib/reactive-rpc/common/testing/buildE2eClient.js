"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildE2eClient = void 0;
const Codecs_1 = require("../../../json-pack/codecs/Codecs");
const Fuzzer_1 = require("../../../util/Fuzzer");
const Writer_1 = require("../../../util/buffers/Writer");
const context_1 = require("../../server/context");
const RpcCodecs_1 = require("../codec/RpcCodecs");
const RpcMessageCodecs_1 = require("../codec/RpcMessageCodecs");
const rpc_1 = require("../rpc");
const buildE2eClient = (caller, opt) => {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const writer = (_a = opt.writer) !== null && _a !== void 0 ? _a : new Writer_1.Writer(Fuzzer_1.Fuzzer.randomInt2((_b = opt.writerDefaultBufferKb) !== null && _b !== void 0 ? _b : [4, 4]) * 1024);
    const codecs = new RpcCodecs_1.RpcCodecs(new Codecs_1.Codecs(writer), new RpcMessageCodecs_1.RpcMessageCodecs());
    const ctx = new context_1.ConnectionContext((_c = opt.ip) !== null && _c !== void 0 ? _c : '0.0.0.0', (_d = opt.ip) !== null && _d !== void 0 ? _d : '', null, {}, codecs.value.cbor, codecs.value.cbor, codecs.messages.binary);
    let client;
    const streamProcessor = new rpc_1.RpcMessageStreamProcessor({
        caller,
        send: (messages) => {
            const encoded = ctx.msgCodec.encode(ctx.resCodec, messages);
            setTimeout(() => {
                const decoded = ctx.msgCodec.decodeBatch(ctx.resCodec, encoded);
                client.onMessages(decoded);
            }, 1);
        },
        bufferSize: Fuzzer_1.Fuzzer.randomInt2((_e = opt.serverBufferSize) !== null && _e !== void 0 ? _e : [1, 1]),
        bufferTime: Fuzzer_1.Fuzzer.randomInt2((_f = opt.serverBufferTime) !== null && _f !== void 0 ? _f : [0, 0]),
    });
    client = new rpc_1.StreamingRpcClient({
        send: (messages) => {
            const encoded = ctx.msgCodec.encode(ctx.reqCodec, messages);
            setTimeout(() => {
                const decoded = ctx.msgCodec.decodeBatch(ctx.reqCodec, encoded);
                streamProcessor.onMessages(decoded, {});
            }, 1);
        },
        bufferSize: Fuzzer_1.Fuzzer.randomInt2((_g = opt.clientBufferSize) !== null && _g !== void 0 ? _g : [1, 1]),
        bufferTime: Fuzzer_1.Fuzzer.randomInt2((_h = opt.clientBufferTime) !== null && _h !== void 0 ? _h : [0, 0]),
    });
    const typedClient = client;
    return {
        client: typedClient,
    };
};
exports.buildE2eClient = buildE2eClient;

/// <reference types="node" />
import * as stream from 'stream';
import type { WsFrameEncoder } from '../codec/WsFrameEncoder';
export type WsServerConnectionSocket = stream.Duplex;
export declare class WsServerConnection {
    protected readonly encoder: WsFrameEncoder;
    readonly socket: WsServerConnectionSocket;
    closed: boolean;
    maxIncomingMessage: number;
    maxBackpressure: number;
    readonly defaultOnPing: (data: Uint8Array | null) => void;
    private _fragments;
    private _fragmentsSize;
    readonly defaultOnFragment: (isLast: boolean, data: Uint8Array, isUtf8: boolean) => void;
    onmessage: (data: Uint8Array, isUtf8: boolean) => void;
    onfragment: (isLast: boolean, data: Uint8Array, isUtf8: boolean) => void;
    onping: (data: Uint8Array | null) => void;
    onpong: (data: Uint8Array | null) => void;
    onclose: (code: number, reason: string) => void;
    constructor(encoder: WsFrameEncoder, socket: WsServerConnectionSocket);
    close(): void;
    private onClose;
    upgrade(secWebSocketKey: string, secWebSocketProtocol: string, secWebSocketExtensions: string): void;
    private __buffer;
    private __writeTimer;
    write(buf: Uint8Array): void;
    sendPing(data: Uint8Array | null): void;
    sendPong(data: Uint8Array | null): void;
    sendBinMsg(data: Uint8Array): void;
    sendTxtMsg(txt: string): void;
}

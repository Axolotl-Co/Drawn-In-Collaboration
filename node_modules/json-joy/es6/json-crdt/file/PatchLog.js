"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PatchLog = void 0;
const json_crdt_patch_1 = require("../../json-crdt-patch");
const printTree_1 = require("../../util/print/printTree");
const AvlMap_1 = require("../../util/trees/avl/AvlMap");
const model_1 = require("../model");
const util_1 = require("../../util/trees/util");
class PatchLog {
    static fromModel(model) {
        const start = new model_1.Model(model.clock.clone());
        const log = new PatchLog(start);
        if (model.api.builder.patch.ops.length) {
            const patch = model.api.flush();
            log.push(patch);
        }
        return log;
    }
    constructor(start) {
        this.start = start;
        this.patches = new AvlMap_1.AvlMap(json_crdt_patch_1.compare);
    }
    push(patch) {
        const id = patch.getId();
        if (!id)
            return;
        this.patches.set(id, patch);
    }
    replayToEnd() {
        const clone = this.start.clone();
        for (let node = (0, util_1.first)(this.patches.root); node; node = (0, util_1.next)(node))
            clone.applyPatch(node.v);
        return clone;
    }
    replayTo(ts) {
        const clone = this.start.clone();
        for (let node = (0, util_1.first)(this.patches.root); node && (0, json_crdt_patch_1.compare)(ts, node.k) >= 0; node = (0, util_1.next)(node))
            clone.applyPatch(node.v);
        return clone;
    }
    toString(tab) {
        const log = [];
        this.patches.forEach(({ v }) => log.push(v));
        return (`log` +
            (0, printTree_1.printTree)(tab, [
                (tab) => this.start.toString(tab),
                () => '',
                (tab) => 'history' +
                    (0, printTree_1.printTree)(tab, log.map((patch, i) => (tab) => `${i}: ${patch.toString(tab)}`)),
            ]));
    }
}
exports.PatchLog = PatchLog;

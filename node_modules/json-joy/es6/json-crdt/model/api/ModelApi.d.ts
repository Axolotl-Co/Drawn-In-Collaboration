import { FanOut } from 'thingies/es2020/fanout';
import { VecNode, ConNode, ObjNode, ArrNode, BinNode, StrNode, ValNode } from '../../nodes';
import { ApiPath, ArrApi, BinApi, ConApi, NodeApi, ObjApi, StrApi, VecApi, ValApi } from './nodes';
import { Patch } from '../../../json-crdt-patch/Patch';
import { PatchBuilder } from '../../../json-crdt-patch/PatchBuilder';
import { SyncStore } from '../../../util/events/sync-store';
import { MergeFanOut, MicrotaskBufferFanOut } from './fanout';
import type { Model } from '../Model';
import type { JsonNode, JsonNodeView } from '../../nodes';
export declare class ModelApi<N extends JsonNode = JsonNode> implements SyncStore<JsonNodeView<N>> {
    readonly model: Model<N>;
    builder: PatchBuilder;
    next: number;
    readonly onBeforeReset: FanOut<void>;
    readonly onReset: FanOut<void>;
    readonly onBeforePatch: FanOut<Patch>;
    readonly onPatch: FanOut<Patch>;
    readonly onBeforeLocalChange: FanOut<number>;
    readonly onLocalChange: FanOut<number>;
    readonly onLocalChanges: MicrotaskBufferFanOut<number>;
    readonly onBeforeTransaction: FanOut<void>;
    readonly onTransaction: FanOut<void>;
    readonly onChange: MergeFanOut<number | void | Patch>;
    readonly onChanges: MicrotaskBufferFanOut<number | void | Patch>;
    readonly onFlush: FanOut<Patch>;
    constructor(model: Model<N>);
    wrap(node: ValNode): ValApi;
    wrap(node: StrNode<any>): StrApi;
    wrap(node: BinNode): BinApi;
    wrap(node: ArrNode): ArrApi;
    wrap(node: ObjNode): ObjApi;
    wrap(node: ConNode): ConApi;
    wrap(node: VecNode): VecApi;
    wrap(node: JsonNode): NodeApi;
    get r(): ValApi<import("../../nodes").RootNode<N>>;
    get node(): import("./types").JsonNodeApi<N>;
    in(path?: ApiPath): ValApi<ValNode<any>>;
    find(path?: ApiPath): JsonNode<unknown>;
    val(path?: ApiPath): ValApi<ValNode<any>>;
    vec(path?: ApiPath): VecApi<VecNode<any>>;
    str(path?: ApiPath): StrApi;
    bin(path?: ApiPath): BinApi;
    arr(path?: ApiPath): ArrApi<ArrNode<any>>;
    obj(path?: ApiPath): ObjApi<ObjNode<any>>;
    const(path?: ApiPath): ConApi<ConNode<any>>;
    root(json: unknown): this;
    apply(): void;
    advance(): void;
    view(): Readonly<JsonNodeView<N>>;
    transaction(callback: () => void): void;
    flush(): Patch;
    stopAutoFlush?: () => void;
    autoFlush(): () => void;
    readonly subscribe: (callback: () => void) => import("thingies/es2020/fanout").FanOutUnsubscribe;
    readonly getSnapshot: () => any;
}

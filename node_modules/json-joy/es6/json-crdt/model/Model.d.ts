import * as clock from '../../json-crdt-patch/clock';
import { ConNode } from '../nodes/const/ConNode';
import { JsonCrdtPatchOperation, Patch } from '../../json-crdt-patch/Patch';
import { ModelApi } from './api/ModelApi';
import { RootNode, BuilderNodeToJsonNode } from '../nodes';
import { Extensions } from '../extensions/Extensions';
import { AvlMap } from '../../util/trees/avl/AvlMap';
import type { JsonNode, JsonNodeView } from '../nodes/types';
import type { Printable } from '../../util/print/types';
import type { NodeBuilder } from '../../json-crdt-patch';
export declare const UNDEFINED: ConNode<undefined>;
export declare class Model<N extends JsonNode = JsonNode<any>> implements Printable {
    static withLogicalClock(clockOrSessionId?: clock.ClockVector | number): Model;
    static withServerClock(time?: number): Model;
    static fromBinary(data: Uint8Array): Model;
    root: RootNode<N>;
    clock: clock.IClockVector;
    index: AvlMap<clock.ITimestampStruct, JsonNode<unknown>>;
    ext: Extensions;
    constructor(clockVector: clock.IClockVector);
    private _api?;
    get api(): ModelApi<N>;
    get find(): import("./api/proxy").ProxyNodeVal<RootNode<N>>;
    get s(): import("./api/proxy").JsonNodeToProxyNode<N>;
    tick: number;
    applyBatch(patches: Patch[]): void;
    onbeforepatch?: (patch: Patch) => void;
    onpatch?: (patch: Patch) => void;
    applyPatch(patch: Patch): void;
    applyOperation(op: JsonCrdtPatchOperation): void;
    protected deleteNodeTree(value: clock.ITimestampStruct): void;
    fork(sessionId?: number): Model<N>;
    clone(): Model<N>;
    onbeforereset?: () => void;
    onreset?: () => void;
    reset(to: Model<N>): void;
    view(): Readonly<JsonNodeView<N>>;
    toBinary(): Uint8Array;
    setSchema<S extends NodeBuilder>(schema: S): Model<BuilderNodeToJsonNode<S>>;
    toString(tab?: string): string;
}

import * as schema from '../../schema';
import { ValidatorCodegenContext } from '../../codegen/validator/ValidatorCodegenContext';
import { ValidationPath } from '../../codegen/validator/types';
import { JsonTextEncoderCodegenContext } from '../../codegen/json/JsonTextEncoderCodegenContext';
import { CborEncoderCodegenContext } from '../../codegen/binary/CborEncoderCodegenContext';
import { JsonEncoderCodegenContext } from '../../codegen/binary/JsonEncoderCodegenContext';
import { JsExpression } from '../../../util/codegen/util/JsExpression';
import { MessagePackEncoderCodegenContext } from '../../codegen/binary/MessagePackEncoderCodegenContext';
import { CapacityEstimatorCodegenContext } from '../../codegen/capacity/CapacityEstimatorCodegenContext';
import { AbstractType } from './AbstractType';
import type * as jsonSchema from '../../../json-schema';
import type { SchemaOf, Type } from '../types';
import type { TypeSystem } from '../../system/TypeSystem';
import type { json_string } from '../../../json-brand';
import type * as ts from '../../typescript/types';
import type { TypeExportContext } from '../../system/TypeExportContext';
export declare class MapType<T extends Type> extends AbstractType<schema.MapSchema<SchemaOf<T>>> {
    protected type: T;
    protected schema: schema.MapSchema<any>;
    constructor(type: T, options?: schema.Optional<schema.MapSchema>);
    getSchema(ctx?: TypeExportContext): schema.MapSchema<SchemaOf<T>>;
    toJsonSchema(): jsonSchema.JsonSchemaObject;
    getOptions(): schema.Optional<schema.MapSchema<SchemaOf<T>>>;
    validateSchema(): void;
    codegenValidator(ctx: ValidatorCodegenContext, path: ValidationPath, r: string): void;
    codegenJsonTextEncoder(ctx: JsonTextEncoderCodegenContext, value: JsExpression): void;
    private codegenBinaryEncoder;
    codegenCborEncoder(ctx: CborEncoderCodegenContext, value: JsExpression): void;
    codegenMessagePackEncoder(ctx: MessagePackEncoderCodegenContext, value: JsExpression): void;
    codegenJsonEncoder(ctx: JsonEncoderCodegenContext, value: JsExpression): void;
    codegenCapacityEstimator(ctx: CapacityEstimatorCodegenContext, value: JsExpression): void;
    random(): Record<string, unknown>;
    toTypeScriptAst(): ts.TsTypeReference;
    toJson(value: unknown, system?: TypeSystem | undefined): json_string<unknown>;
    toString(tab?: string): string;
}

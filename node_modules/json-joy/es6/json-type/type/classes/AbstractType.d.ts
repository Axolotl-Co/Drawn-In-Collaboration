import * as schema from '../../schema';
import { Printable } from '../../../util/print/types';
import { ValidatorCodegenContext, ValidatorCodegenContextOptions } from '../../codegen/validator/ValidatorCodegenContext';
import { JsonTypeValidator, ValidationPath } from '../../codegen/validator/types';
import { JsonTextEncoderCodegenContext, JsonTextEncoderCodegenContextOptions, JsonEncoderFn } from '../../codegen/json/JsonTextEncoderCodegenContext';
import { CompiledBinaryEncoder } from '../../codegen/types';
import { CborEncoderCodegenContext, CborEncoderCodegenContextOptions } from '../../codegen/binary/CborEncoderCodegenContext';
import { JsonEncoderCodegenContext, JsonEncoderCodegenContextOptions } from '../../codegen/binary/JsonEncoderCodegenContext';
import { JsExpression } from '../../../util/codegen/util/JsExpression';
import { MessagePackEncoderCodegenContext, MessagePackEncoderCodegenContextOptions } from '../../codegen/binary/MessagePackEncoderCodegenContext';
import { EncodingFormat } from '../../../json-pack/constants';
import { CapacityEstimatorCodegenContext, CapacityEstimatorCodegenContextOptions, CompiledCapacityEstimator } from '../../codegen/capacity/CapacityEstimatorCodegenContext';
import { JsonValueCodec } from '../../../json-pack/codecs/types';
import type * as jsonSchema from '../../../json-schema';
import type { BaseType } from '../types';
import type { TypeSystem } from '../../system/TypeSystem';
import type { json_string } from '../../../json-brand';
import type * as ts from '../../typescript/types';
import type { TypeExportContext } from '../../system/TypeExportContext';
import type { Validators } from './types';
import type * as jtd from '../../jtd/types';
export declare abstract class AbstractType<S extends schema.Schema> implements BaseType<S>, Printable {
    system?: TypeSystem;
    protected validators: Validators;
    protected encoders: Map<EncodingFormat, CompiledBinaryEncoder>;
    protected abstract schema: S;
    getSystem(): TypeSystem;
    getTypeName(): S['__t'];
    getSchema(): S;
    getValidatorNames(): string[];
    toJsonSchema(ctx?: TypeExportContext): jsonSchema.JsonSchemaNode;
    options(options: schema.Optional<S>): this;
    getOptions(): schema.Optional<S>;
    abstract validateSchema(): void;
    validate(value: unknown): void;
    compileValidator(options: Partial<Omit<ValidatorCodegenContextOptions, 'type'>>): JsonTypeValidator;
    private __compileValidator;
    validator(kind: keyof Validators): JsonTypeValidator;
    protected compileJsonTextEncoder(options: Omit<JsonTextEncoderCodegenContextOptions, 'type'>): JsonEncoderFn;
    codegenJsonTextEncoder(ctx: JsonTextEncoderCodegenContext, value: JsExpression): void;
    private __jsonEncoder;
    jsonTextEncoder(): JsonEncoderFn;
    compileEncoder(format: EncodingFormat, name?: string): CompiledBinaryEncoder;
    encoder(kind: EncodingFormat): CompiledBinaryEncoder;
    encode(codec: JsonValueCodec, value: unknown): Uint8Array;
    codegenValidator(ctx: ValidatorCodegenContext, path: ValidationPath, r: string): void;
    compileCborEncoder(options: Omit<CborEncoderCodegenContextOptions, 'type' | 'encoder'>): CompiledBinaryEncoder;
    codegenCborEncoder(ctx: CborEncoderCodegenContext, value: JsExpression): void;
    compileMessagePackEncoder(options: Omit<MessagePackEncoderCodegenContextOptions, 'type' | 'encoder'>): CompiledBinaryEncoder;
    codegenMessagePackEncoder(ctx: MessagePackEncoderCodegenContext, value: JsExpression): void;
    compileJsonEncoder(options: Omit<JsonEncoderCodegenContextOptions, 'type' | 'encoder'>): CompiledBinaryEncoder;
    codegenJsonEncoder(ctx: JsonEncoderCodegenContext, value: JsExpression): void;
    compileCapacityEstimator(options: Omit<CapacityEstimatorCodegenContextOptions, 'type'>): CompiledCapacityEstimator;
    codegenCapacityEstimator(ctx: CapacityEstimatorCodegenContext, value: JsExpression): void;
    private __capacityEstimator;
    capacityEstimator(): CompiledCapacityEstimator;
    random(): unknown;
    toTypeScriptAst(): ts.TsNode;
    toJson(value: unknown, system?: TypeSystem | undefined): json_string<unknown>;
    protected toStringTitle(): string;
    protected toStringOptions(): string;
    toString(tab?: string): string;
    toJtdForm(): jtd.JtdForm;
}

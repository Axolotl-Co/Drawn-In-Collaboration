import { switchMap } from 'rxjs';
export const listen = ({ t, services }) => (r) => {
    const PatchType = t.Ref('BlockPatch');
    const Request = t.Object(t.prop('id', t.Ref('BlockId')).options({
        title: 'Block ID',
        description: 'The ID of the block to subscribe to.',
    }));
    const Response = t.Object(t.propOpt('deleted', t.Boolean()).options({
        title: 'Deleted',
        description: 'Emitted only when the block is deleted.',
    }), t.propOpt('block', t.Ref('Block')).options({
        title: 'Block',
        description: 'The whole block object, emitted only when the block is created.',
    }), t.propOpt('patches', t.Array(PatchType)).options({
        title: 'Latest patches',
        description: 'Patches that have been applied to the block.',
    }));
    const Func = t.Function$(Request, Response).options({
        title: 'Listen for block changes',
        description: 'Subscribe to a block to receive updates when it changes.',
    });
    return r.prop('blocks.listen', Func, (req$) => {
        return req$.pipe(switchMap(({ id }) => services.pubsub.listen$(`__block:${id}`)));
    });
};

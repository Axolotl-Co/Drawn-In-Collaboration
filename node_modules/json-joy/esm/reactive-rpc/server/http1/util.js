import { PayloadTooLarge } from './errors';
export const getBody = (request, max) => {
    return new Promise((resolve, reject) => {
        let size = 0;
        const chunks = [];
        request.on('error', (error) => {
            request.removeAllListeners();
            reject(error);
        });
        request.on('data', (chunk) => {
            size += chunk.length;
            if (size > max) {
                request.removeAllListeners();
                reject(new PayloadTooLarge());
                return;
            }
            chunks.push(chunk);
        });
        request.on('end', () => {
            resolve(chunks);
        });
    });
};
const REGEX_AUTH_TOKEN_SPECIFIER = /tkn\.([a-zA-Z0-9\-_]+)(?:[^a-zA-Z0-9\-_]|$)/;
export const findTokenInText = (text) => {
    const match = REGEX_AUTH_TOKEN_SPECIFIER.exec(text);
    if (!match)
        return '';
    return match[1] || '';
};
const REGEX_CODECS_SPECIFIER = /rpc\.(\w{0,32})\.(\w{0,32})\.(\w{0,32})(?:\-(\w{0,32}))?/;
export const setCodecs = (ctx, specifier, codecs) => {
    const match = REGEX_CODECS_SPECIFIER.exec(specifier);
    if (!match)
        return;
    const [, protocol, messageFormat, request, response] = match;
    switch (protocol) {
        case 'rx': {
            switch (messageFormat) {
                case 'compact': {
                    ctx.msgCodec = codecs.messages.compact;
                    break;
                }
                case 'binary': {
                    ctx.msgCodec = codecs.messages.binary;
                    break;
                }
            }
            break;
        }
        case 'json2': {
            ctx.msgCodec = codecs.messages.jsonRpc2;
            break;
        }
    }
    switch (request) {
        case 'cbor': {
            ctx.resCodec = ctx.reqCodec = codecs.value.cbor;
            break;
        }
        case 'json': {
            ctx.resCodec = ctx.reqCodec = codecs.value.json;
            break;
        }
        case 'msgpack': {
            ctx.resCodec = ctx.reqCodec = codecs.value.msgpack;
            break;
        }
    }
    switch (response) {
        case 'cbor': {
            ctx.resCodec = codecs.value.cbor;
            break;
        }
        case 'json': {
            ctx.resCodec = codecs.value.json;
            break;
        }
        case 'msgpack': {
            ctx.resCodec = codecs.value.msgpack;
            break;
        }
    }
};

import { Codecs } from '../../../json-pack/codecs/Codecs';
import { Fuzzer } from '../../../util/Fuzzer';
import { Writer } from '../../../util/buffers/Writer';
import { ConnectionContext } from '../../server/context';
import { RpcCodecs } from '../codec/RpcCodecs';
import { RpcMessageCodecs } from '../codec/RpcMessageCodecs';
import { RpcMessageStreamProcessor, StreamingRpcClient } from '../rpc';
export const buildE2eClient = (caller, opt) => {
    const writer = opt.writer ?? new Writer(Fuzzer.randomInt2(opt.writerDefaultBufferKb ?? [4, 4]) * 1024);
    const codecs = new RpcCodecs(new Codecs(writer), new RpcMessageCodecs());
    const ctx = new ConnectionContext(opt.ip ?? '0.0.0.0', opt.ip ?? '', null, {}, codecs.value.cbor, codecs.value.cbor, codecs.messages.binary);
    let client;
    const streamProcessor = new RpcMessageStreamProcessor({
        caller,
        send: (messages) => {
            const encoded = ctx.msgCodec.encode(ctx.resCodec, messages);
            setTimeout(() => {
                const decoded = ctx.msgCodec.decodeBatch(ctx.resCodec, encoded);
                client.onMessages(decoded);
            }, 1);
        },
        bufferSize: Fuzzer.randomInt2(opt.serverBufferSize ?? [1, 1]),
        bufferTime: Fuzzer.randomInt2(opt.serverBufferTime ?? [0, 0]),
    });
    client = new StreamingRpcClient({
        send: (messages) => {
            const encoded = ctx.msgCodec.encode(ctx.reqCodec, messages);
            setTimeout(() => {
                const decoded = ctx.msgCodec.decodeBatch(ctx.reqCodec, encoded);
                streamProcessor.onMessages(decoded, {});
            }, 1);
        },
        bufferSize: Fuzzer.randomInt2(opt.clientBufferSize ?? [1, 1]),
        bufferTime: Fuzzer.randomInt2(opt.clientBufferTime ?? [0, 0]),
    });
    const typedClient = client;
    return {
        client: typedClient,
    };
};

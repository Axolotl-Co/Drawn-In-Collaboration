import { Model } from '..';
import { s } from '../../json-crdt-patch';
import { formatWithOptions } from 'util';
console.clear();
const schema = s.obj({
    id: s.con('xyz'),
    text: s.str('hello'),
    temperature: s.con(36.6),
});
const model = Model.withLogicalClock(1234).setSchema(schema);
console.log(model + '');
console.log(model.root + '');
const encoded = model.toBinary();
console.log(encoded);
const decoded = Model.fromBinary(encoded);
console.log(decoded.root + '');
import { Encoder as VerboseEncoder } from '../codec/structural/verbose/Encoder';
import { Decoder as VerboseDecoder } from '../codec/structural/verbose/Decoder';
const verboseEncoder = new VerboseEncoder();
const verboseDecoder = new VerboseDecoder();
const verboseEncoded = verboseEncoder.encode(model);
console.log(formatWithOptions({ depth: 30 }, verboseEncoded));
const verboseDecoded = verboseDecoder.decode(verboseEncoded);
console.log(verboseDecoded.root + '');
import { Encoder as CompactEncoder } from '../codec/structural/compact/Encoder';
import { Decoder as CompactDecoder } from '../codec/structural/compact/Decoder';
const compactEncoder = new CompactEncoder();
const compactDecoder = new CompactDecoder();
const compactEncoded = compactEncoder.encode(model);
console.log(formatWithOptions({ depth: 30 }, compactEncoded));
const compactDecoded = compactDecoder.decode(compactEncoded);
console.log(compactDecoded.root + '');
import { Encoder as IndexedEncoder } from '../codec/indexed/binary/Encoder';
import { Decoder as IndexedDecoder } from '../codec/indexed/binary/Decoder';
const indexedEncoder = new IndexedEncoder();
const indexedDecoder = new IndexedDecoder();
const indexedEncoded = indexedEncoder.encode(model);
console.log(formatWithOptions({ depth: 30 }, indexedEncoded));
const indexedDecoded = indexedDecoder.decode(indexedEncoded);
console.log(indexedDecoded.root + '');
import { Encoder as SidecarEncoder } from '../codec/sidecar/binary/Encoder';
import { Decoder as SidecarDecoder } from '../codec/sidecar/binary/Decoder';
const sidecarEncoder = new SidecarEncoder();
const sidecarDecoder = new SidecarDecoder();
const [view, sidecar] = sidecarEncoder.encode(model);
console.log(formatWithOptions({ depth: 30 }, sidecar));
const sidecarDecoded = sidecarDecoder.decode(model.view(), sidecar);
console.log(sidecarDecoded.root + '');

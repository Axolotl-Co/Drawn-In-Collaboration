import { FanOut } from 'thingies/es2020/fanout';
export class MergeFanOut extends FanOut {
    fanouts;
    unsubs = [];
    constructor(fanouts) {
        super();
        this.fanouts = fanouts;
    }
    listen(listener) {
        if (!this.listeners.size)
            this.unsubs = this.fanouts.map((fanout) => fanout.listen((data) => this.emit(data)));
        const unsub = super.listen(listener);
        return () => {
            unsub();
            if (!this.listeners.size) {
                this.unsubs.forEach((unsub) => unsub());
                this.unsubs = [];
            }
        };
    }
}
export class MicrotaskBufferFanOut extends FanOut {
    source;
    buffer = [];
    unsub = undefined;
    constructor(source) {
        super();
        this.source = source;
    }
    listen(listener) {
        if (!this.unsub) {
            this.unsub = this.source.listen((data) => {
                const buffer = this.buffer;
                if (!buffer.length) {
                    queueMicrotask(() => {
                        this.emit(buffer);
                        this.buffer = [];
                    });
                }
                buffer.push(data);
            });
        }
        const unsub = super.listen(listener);
        return () => {
            unsub();
            if (!this.listeners.size)
                this.clear();
        };
    }
    clear() {
        this.listeners.clear();
        this.buffer = [];
        this.unsub?.();
        this.unsub = undefined;
    }
}
export class MapFanOut extends FanOut {
    source;
    mapper;
    constructor(source, mapper) {
        super();
        this.source = source;
        this.mapper = mapper;
    }
    unsub = undefined;
    listen(listener) {
        if (!this.unsub)
            this.unsub = this.source.listen((data) => this.emit(this.mapper(data)));
        const unsub = super.listen(listener);
        return () => {
            unsub();
            if (!this.listeners.size)
                this.clear();
        };
    }
    clear() {
        this.listeners.clear();
        this.unsub?.();
        this.unsub = undefined;
    }
}
export class OnNewFanOut extends FanOut {
    source;
    last = undefined;
    unsub = undefined;
    constructor(source) {
        super();
        this.source = source;
    }
    listen(listener) {
        if (!this.unsub) {
            this.unsub = this.source.listen((data) => {
                if (this.last !== data)
                    this.emit((this.last = data));
            });
        }
        const unsub = super.listen(listener);
        return () => {
            unsub();
            if (!this.listeners.size)
                this.clear();
        };
    }
    clear() {
        this.listeners.clear();
        this.last = undefined;
        this.unsub?.();
        this.unsub = undefined;
    }
}

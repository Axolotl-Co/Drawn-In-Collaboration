import { FanOut } from 'thingies/es2020/fanout';
import { VecNode, ConNode, ObjNode, ArrNode, BinNode, StrNode, ValNode } from '../../nodes';
import { ArrApi, BinApi, ConApi, ObjApi, StrApi, VecApi, ValApi } from './nodes';
import { PatchBuilder } from '../../../json-crdt-patch/PatchBuilder';
import { MergeFanOut, MicrotaskBufferFanOut } from './fanout';
export class ModelApi {
    model;
    builder;
    next = 0;
    onBeforeReset = new FanOut();
    onReset = new FanOut();
    onBeforePatch = new FanOut();
    onPatch = new FanOut();
    onBeforeLocalChange = new FanOut();
    onLocalChange = new FanOut();
    onLocalChanges = new MicrotaskBufferFanOut(this.onLocalChange);
    onBeforeTransaction = new FanOut();
    onTransaction = new FanOut();
    onChange = new MergeFanOut([this.onReset, this.onPatch, this.onLocalChange]);
    onChanges = new MicrotaskBufferFanOut(this.onChange);
    onFlush = new FanOut();
    constructor(model) {
        this.model = model;
        this.builder = new PatchBuilder(model.clock);
        model.onbeforereset = () => this.onBeforeReset.emit();
        model.onreset = () => this.onReset.emit();
        model.onbeforepatch = (patch) => this.onBeforePatch.emit(patch);
        model.onpatch = (patch) => this.onPatch.emit(patch);
    }
    wrap(node) {
        if (node instanceof ValNode)
            return node.api || (node.api = new ValApi(node, this));
        else if (node instanceof StrNode)
            return node.api || (node.api = new StrApi(node, this));
        else if (node instanceof BinNode)
            return node.api || (node.api = new BinApi(node, this));
        else if (node instanceof ArrNode)
            return node.api || (node.api = new ArrApi(node, this));
        else if (node instanceof ObjNode)
            return node.api || (node.api = new ObjApi(node, this));
        else if (node instanceof ConNode)
            return node.api || (node.api = new ConApi(node, this));
        else if (node instanceof VecNode)
            return node.api || (node.api = new VecApi(node, this));
        else
            throw new Error('UNKNOWN_NODE');
    }
    get r() {
        return new ValApi(this.model.root, this);
    }
    get node() {
        return this.r.get();
    }
    in(path) {
        return this.r.in(path);
    }
    find(path) {
        return this.node.find(path);
    }
    val(path) {
        return this.node.val(path);
    }
    vec(path) {
        return this.node.tup(path);
    }
    str(path) {
        return this.node.str(path);
    }
    bin(path) {
        return this.node.bin(path);
    }
    arr(path) {
        return this.node.arr(path);
    }
    obj(path) {
        return this.node.obj(path);
    }
    const(path) {
        return this.node.const(path);
    }
    root(json) {
        const builder = this.builder;
        builder.root(builder.json(json));
        this.apply();
        return this;
    }
    apply() {
        const ops = this.builder.patch.ops;
        const length = ops.length;
        const model = this.model;
        const from = this.next;
        this.onBeforeLocalChange.emit(from);
        for (let i = this.next; i < length; i++)
            model.applyOperation(ops[i]);
        this.next = length;
        model.tick++;
        this.onLocalChange.emit(from);
    }
    advance() {
        const from = this.next;
        this.next = this.builder.patch.ops.length;
        this.model.tick++;
        this.onLocalChange.emit(from);
    }
    view() {
        return this.model.view();
    }
    transaction(callback) {
        this.onBeforeTransaction.emit();
        callback();
        this.onTransaction.emit();
    }
    flush() {
        const patch = this.builder.flush();
        this.next = 0;
        this.onFlush.emit(patch);
        return patch;
    }
    stopAutoFlush = undefined;
    autoFlush() {
        const drain = () => this.builder.patch.ops.length && this.flush();
        const onLocalChangesUnsubscribe = this.onLocalChanges.listen(drain);
        const onBeforeTransactionUnsubscribe = this.onBeforeTransaction.listen(drain);
        const onTransactionUnsubscribe = this.onTransaction.listen(drain);
        return (this.stopAutoFlush = () => {
            this.stopAutoFlush = undefined;
            onLocalChangesUnsubscribe();
            onBeforeTransactionUnsubscribe();
            onTransactionUnsubscribe();
        });
    }
    subscribe = (callback) => this.onChanges.listen(() => callback());
    getSnapshot = () => this.view();
}

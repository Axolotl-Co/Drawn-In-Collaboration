import { compare } from '../../json-crdt-patch';
import { printTree } from '../../util/print/printTree';
import { AvlMap } from '../../util/trees/avl/AvlMap';
import { Model } from '../model';
import { first, next } from '../../util/trees/util';
export class PatchLog {
    start;
    static fromModel(model) {
        const start = new Model(model.clock.clone());
        const log = new PatchLog(start);
        if (model.api.builder.patch.ops.length) {
            const patch = model.api.flush();
            log.push(patch);
        }
        return log;
    }
    patches = new AvlMap(compare);
    constructor(start) {
        this.start = start;
    }
    push(patch) {
        const id = patch.getId();
        if (!id)
            return;
        this.patches.set(id, patch);
    }
    replayToEnd() {
        const clone = this.start.clone();
        for (let node = first(this.patches.root); node; node = next(node))
            clone.applyPatch(node.v);
        return clone;
    }
    replayTo(ts) {
        const clone = this.start.clone();
        for (let node = first(this.patches.root); node && compare(ts, node.k) >= 0; node = next(node))
            clone.applyPatch(node.v);
        return clone;
    }
    toString(tab) {
        const log = [];
        this.patches.forEach(({ v }) => log.push(v));
        return (`log` +
            printTree(tab, [
                (tab) => this.start.toString(tab),
                () => '',
                (tab) => 'history' +
                    printTree(tab, log.map((patch, i) => (tab) => `${i}: ${patch.toString(tab)}`)),
            ]));
    }
}

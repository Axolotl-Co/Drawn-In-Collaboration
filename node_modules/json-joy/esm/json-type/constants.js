export var ValidationError;
(function (ValidationError) {
    ValidationError[ValidationError["STR"] = 0] = "STR";
    ValidationError[ValidationError["NUM"] = 1] = "NUM";
    ValidationError[ValidationError["BOOL"] = 2] = "BOOL";
    ValidationError[ValidationError["ARR"] = 3] = "ARR";
    ValidationError[ValidationError["TUP"] = 4] = "TUP";
    ValidationError[ValidationError["OBJ"] = 5] = "OBJ";
    ValidationError[ValidationError["MAP"] = 6] = "MAP";
    ValidationError[ValidationError["KEY"] = 7] = "KEY";
    ValidationError[ValidationError["KEYS"] = 8] = "KEYS";
    ValidationError[ValidationError["BIN"] = 9] = "BIN";
    ValidationError[ValidationError["OR"] = 10] = "OR";
    ValidationError[ValidationError["REF"] = 11] = "REF";
    ValidationError[ValidationError["ENUM"] = 12] = "ENUM";
    ValidationError[ValidationError["CONST"] = 13] = "CONST";
    ValidationError[ValidationError["VALIDATION"] = 14] = "VALIDATION";
    ValidationError[ValidationError["INT"] = 15] = "INT";
    ValidationError[ValidationError["UINT"] = 16] = "UINT";
    ValidationError[ValidationError["STR_LEN"] = 17] = "STR_LEN";
    ValidationError[ValidationError["ARR_LEN"] = 18] = "ARR_LEN";
    ValidationError[ValidationError["GT"] = 19] = "GT";
    ValidationError[ValidationError["GTE"] = 20] = "GTE";
    ValidationError[ValidationError["LT"] = 21] = "LT";
    ValidationError[ValidationError["LTE"] = 22] = "LTE";
})(ValidationError || (ValidationError = {}));
export const ValidationErrorMessage = {
    [ValidationError.STR]: 'Not a string.',
    [ValidationError.NUM]: 'Not a number.',
    [ValidationError.BOOL]: 'Not a boolean.',
    [ValidationError.ARR]: 'Not an array.',
    [ValidationError.TUP]: 'Not a tuple.',
    [ValidationError.OBJ]: 'Not an object.',
    [ValidationError.MAP]: 'Not a map.',
    [ValidationError.KEY]: 'Missing key.',
    [ValidationError.KEYS]: 'Too many or missing object keys.',
    [ValidationError.BIN]: 'Not a binary.',
    [ValidationError.OR]: 'None of types matched.',
    [ValidationError.REF]: 'Validation error in referenced type.',
    [ValidationError.ENUM]: 'Not an enum value.',
    [ValidationError.CONST]: 'Invalid constant.',
    [ValidationError.VALIDATION]: 'Custom validator failed.',
    [ValidationError.INT]: 'Not an integer.',
    [ValidationError.UINT]: 'Not an unsigned integer.',
    [ValidationError.STR_LEN]: 'Invalid string length.',
    [ValidationError.ARR_LEN]: 'Invalid array length.',
    [ValidationError.GT]: 'Value is too small.',
    [ValidationError.GTE]: 'Value is too small.',
    [ValidationError.LT]: 'Value is too large.',
    [ValidationError.LTE]: 'Value is too large.',
};
